@require: make-html/stdjahtml
@require: make-html/itemize
@require: make-html/url
@require: make-html/code
@import: ../local

document (|
  title = {\SATySFi;に関すること};
  author = {\@puripuri2100};
  style-sheet=`main.css`;
|) '<
    +p {
      これは「\href(`https://adventar.org/calendars/3929`){SATySFi Advent Calendar 2019}」の24日目の記事です。
    }
    +p {
      23日目は\href(` `){bd_gfngfnさん}でした。25日目は\href(` `){puripuri2100}です。
    }
  +section ?:(`はじめに`) {はじめに} <
    +p {
      SATySFiで機能を拡張したり新たな機能を追加したりするときに用いるのが「パッケージ」です。
    }
    +p {
      実態としては\code(`let-inline`);や\code(`let-block`);で定義されたコマンド、\code(`let`);や\code(`let-rec`);で定義された関数などです。
    }
    +p {
      利用者側がパッケージを\code(`@require`);や\code(`@import`);で読み込むだけで、そこで定義されているコマンドや関数を使えるようになるという便利機能で、SATySFiを使っている人間ほぼ全員がお世話になっていることでしょう。
    }
    +p {
      さて、このパッケージはとても簡単に作ることができるのでここで解説してみようと思います。
    }
    +p {
      コマンドや関数をパッケージ化することでメンテナンスしやすくなったり、便利機能を使いまわすことができたり、車輪の再発明を防いだりすることができるので、良いコマンドや関数を作ったらパッケージ化していくようにしましょう。
    }
    +p {
      パッケージの配布方法についてはこのアドベントカレンダーの「\href(`https://qiita.com/na4zagin3/items/b392f5d522f9bcc0493b`){素敵なライブラリをSatyrographosで配布しよう！}」をお読みください。
    }
  >
  +section ?:(`ファイルを分ける`) {ファイルを分ける} <
    +p {
      まず、機能が似ている関数やコマンド、目的が同じ関数やコマンドを別のファイルに分けましょう。これだけでもパッケージになります。
    }
    +p {
      基本としてはそのままコピペするだけですが、注意点として依存する他のパッケージがある場合はそれを読み込む必要がありますし、元の文書のプリアンブルなどに依存する関数などが書いてある場合はそれもすべてコピペする必要があるということです。
    }
    +p {
      ここで定義された関数などは、パッケージを読み込んだだけですぐに使えるようになります。
    便利ですね。
    }
    +p {
      しかし、これには欠点があります。
    内部で関数などを定義するときだけに使われるものがトップレベルで定義されてしまい、場合によっては他のパッケージの関数などを覆い隠してしまい、衝突してしまうかもしれないのです。
    }
    +p {
      ここで使う機能がモジュールです。
    }
  >
  +section ?:(`モジュールを使う`) {モジュールを使う} <
    +p {
      定義する関数などに名前空間を付ける機能がモジュールです。
    }
    +p {
      モジュールは
    }
    +code(`
    module 〈名前〉 = struct

      関数やコマンドの定義

    end`);
    +p {
      という形で使います。
    コンストラク名は大文字のアルファベットから始まるアルファベットと数字の組み合わせのものです（正規表現なら\code(`[A-Z][a-zA-Z0-9]*`);となります）。
    }
    +p {
      ここで定義された関数は\code(`〈モジュール名〉.〈関数名〉`);のようにして使います。
    たとえばこんな感じです。
    }
    +code(`

    module Module0 = struct

      let hoge = 1

    end

    let fuga = Module0.hoge`);
    +p {
      一々モジュール名を書くのが面倒な時は\code(`open 〈モジュール名〉`);とすることで省略できるようになります。
    }
    +p {
      効果を局所的にしたいときは\code(`open 〈モジュール名〉 in`);とするか\code(`〈モジュール名〉.(式)`);とするかします。
    }
    >
    +section ?:(`シグネチャを使う`) {シグネチャを使う} <
    +p {
      モジュールを使うと名前空間によって関数などが衝突するのを防げますが、内部で使うだけの関数も公開されてしまいます。
    }
    +p {
      そこで、シグネチャという機能を使うことで後悔する関数やコマンドを限定することができます。
    }
    +p {
      使い方は
    }
    +code(`
    module 〈名前〉:sig 

      公開する関数などの名前と型

    end = struct

      関数やコマンドの定義

    end`);
    +p {
      です。関数は\code(`val f : 型`);の形で、型は\code(`type t`);か\code(`type t = 定義`);の形で公開できます。
    }
    +p {
      コマンドは\code(`val cmd : 型のリスト inline-cmdかblock-cmdの指定`);か\code(`direct cmd : 型 inline-cmdかblock-cmdの指定`);でできます。\code(`direct`);を使うと、トップレベルで定義したのと同じように、モジュール名を付けなくてもコマンドを使うことができるようになります。
    }
    +p {
      例えばこんな感じです。
    }
    +code(`
    @require: stdja

    module Module1 :sig

      val hoge : int
      direct \test : [string] inline-cmd
      direct +test : [string] block-cmd

    end = struct

      let hoge = 1

      let fuga = 2 %公開されない

      let-inline \test str = embed-string str

      let-block +test str = <+p{\test(str);}>

    end
    `);
  >
    +section ?:(`おわりに`) {おわりに} <
    +p {
      短い記事なりましたが、モジュール機能やシグネチャを使って素敵なパッケージをたくさん作ってみてください。
    }
  >
>